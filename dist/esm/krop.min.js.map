{"version":3,"file":"krop.min.js","sources":["../../lib/structures/RequestManager.js","../../lib/functions/HTTP2.js","../../lib/functions/Request.js","../../lib/functions/HTTP.js","../../lib/functions/HTTPS.js","../../lib/Index.js","../../lib/structures/Session.js"],"sourcesContent":["\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport { Agent } from \"https\";\r\nimport { constants } from \"http2\";\r\n\r\nconst {\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_AUTHORITY,\r\n} = constants;\r\n\r\nclass RequestManager {\r\n  constructor() {\r\n    this.midia_types = [\"image\", \"video\", \"audio\", \"font\"];\r\n  }\r\n\r\n  proxyParse(text) {\r\n    var input = text;\r\n\r\n    const protocol = input.split(\"://\")[0];\r\n\r\n    if (input.includes(\"@\"))\r\n      input = input.substring(input.lastIndexOf(\"@\") + 1);\r\n    else if (input.includes(\"://\")) input = input.split(\"://\")[1];\r\n\r\n    const host = input.split(\":\")[0];\r\n    const port = parseInt(input.split(\":\")[1]);\r\n\r\n    input = text.split(\"://\")[1];\r\n\r\n    input = text.substring(0, text.lastIndexOf(\"@\"));\r\n    const [username, password] = input.split(\":\");\r\n\r\n    return { host, port, protocol: protocol || \"https\", username, password };\r\n  }\r\n\r\n  proxyTunnel(url, proxy, headers = {}, timeout = 15000) {\r\n    return new Promise((resolve, reject) => {\r\n      const urlParsed = new URL(url);\r\n      const parsed_proxy =\r\n        typeof proxy == \"object\" ? proxy : this.proxyParse(proxy);\r\n\r\n      if (parsed_proxy.username) {\r\n        headers[\"Proxy-Authorization\"] =\r\n          \"Basic \" +\r\n          Buffer.from(\r\n            parsed_proxy.username + \":\" + parsed_proxy.password\r\n          ).toString(\"base64\");\r\n      }\r\n\r\n      request({\r\n        host: parsed_proxy.host,\r\n        port: parsed_proxy.port,\r\n        method: \"CONNECT\",\r\n        maxVersion: \"TLSv1.3\",\r\n        path: `${urlParsed.hostname}:${urlParsed.port ? urlParsed.port : 443}`,\r\n        timeout,\r\n        headers,\r\n      })\r\n        .on(\"connect\", (response, socket) => {\r\n          if (response.statusCode == 200) {\r\n            resolve(socket);\r\n          } else {\r\n            reject(response);\r\n          }\r\n        })\r\n        .on(\"error\", (err) => reject(err))\r\n        .on(\"timeout\", (err) => reject(\"timeout to connect in proxy\"))\r\n        .end();\r\n    });\r\n  }\r\n\r\n  parseResponseData(arr_data, headers) {\r\n    const buffer = Buffer.concat(arr_data);\r\n    var data;\r\n\r\n    try {\r\n      data = JSON.parse(buffer.toString());\r\n    } catch (error) {\r\n      if (\r\n        headers[\"content-type\"] &&\r\n        this.midia_types.some((type) => headers[\"content-type\"].includes(type))\r\n      ) {\r\n        data = buffer;\r\n      } else {\r\n        data = buffer.toString();\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async parseOptions(options = {}) {\r\n    const parsed_url = new URL(options.url);\r\n\r\n    const buffer = Buffer.from(\r\n      typeof options.payload == \"object\"\r\n        ? JSON.stringify(options.payload)\r\n        : typeof options.payload != \"string\" && options.payload\r\n        ? String(options.payload)\r\n        : options.payload || \"\"\r\n    );\r\n\r\n    if (options.http2) {\r\n      if (options.proxy) {\r\n        options.socket = await this.proxyTunnel(options.url, options.proxy);\r\n      }\r\n\r\n      return {\r\n        url: options.url,\r\n        payload: buffer,\r\n        client: {\r\n          maxVersion: \"TLSv1.3\",\r\n          ALPNProtocols: [\"h2\", \"http/1.1\"],\r\n          socket: options.socket,\r\n        },\r\n        request: {\r\n          [HTTP2_HEADER_AUTHORITY]: parsed_url.host,\r\n          [HTTP2_HEADER_PATH]: parsed_url.pathname + parsed_url.search || \"/\",\r\n          [HTTP2_HEADER_SCHEME]: parsed_url.protocol.split(\":\")[0],\r\n          [HTTP2_HEADER_METHOD]:\r\n            constants[`HTTP2_METHOD_${options.method?.toUpperCase()}`],\r\n          \"Content-Type\":\r\n            options?.headers && options?.headers[\"Content-Type\"]\r\n              ? options?.headers[\"Content-Type\"]\r\n              : \"text/plain\",\r\n          \"Content-Length\": buffer.length,\r\n          Accept: \"*/*, image/*\",\r\n          ...options?.headers,\r\n        },\r\n      };\r\n    } else {\r\n      if (options.proxy) {\r\n        options.agent = new Agent({\r\n          socket: await this.proxyTunnel(options.url, options.proxy).catch(\r\n            (error) => {\r\n              throw error;\r\n            }\r\n          ),\r\n          keepAlive: true,\r\n        });\r\n      } else {\r\n        options.agent = new Agent(options);\r\n      }\r\n\r\n      return {\r\n        url: options.url,\r\n        payload: buffer,\r\n        request: {\r\n          origin: parsed_url.origin,\r\n          href: parsed_url.href,\r\n          protocol: parsed_url.protocol || \"https:\",\r\n          hostname: parsed_url.hostname,\r\n          path: parsed_url.pathname + parsed_url.search || \"/\",\r\n          port: parsed_url.port || 443,\r\n          method: options.method?.toUpperCase() || \"GET\",\r\n          maxVersion: \"TLSv1.3\",\r\n          timeout: options.timeout || 15000,\r\n          headers: {\r\n            accept: \"application/json, text/plain, image/*, */*\",\r\n            \"accept-language\": \"en-US,en;q=0.9\",\r\n            \"Content-Length\": buffer.length,\r\n            ...options?.headers,\r\n          },\r\n          ...options,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new RequestManager();\r\n","import { connect, constants } from \"http2\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nconst { HTTP2_HEADER_STATUS } = constants;\r\n\r\nexport default function HTTP2(options) {\r\n  return new Promise(async (resolve) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n    const clientSession = connect(new URL(parsed_options.url), parsed_options.client);\r\n    const req = clientSession.request(parsed_options.request);\r\n\r\n    req.on(\"response\", (headers) => {\r\n      const response_data = [];\r\n\r\n      req.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      req.on(\"end\", () => {\r\n        req.close();\r\n        clientSession.close();\r\n\r\n        resolve({\r\n          status: headers[HTTP2_HEADER_STATUS],\r\n          headers,\r\n          data: RequestManager.parseResponseData(response_data, headers),\r\n        });\r\n      });\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    req.end();\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport __HTTP from \"./HTTP.js\";\r\nimport __HTTPS from \"./HTTPS.js\";\r\nimport __HTTP2 from \"./HTTP2.js\";\r\n\r\nfunction Request(options) {\r\n  return options.http2\r\n    ? __HTTP2(options)\r\n    : options.url.includes(\"http:\")\r\n    ? __HTTP(options)\r\n    : __HTTPS(options);\r\n}\r\n\r\nexport default Request;\r\n","\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTP(options = {}) {\r\n  return new Promise(async (resolve, reject) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n    delete parsed_options.request.agent;\r\n\r\n    if (parsed_options.request.port == 443) {\r\n      delete parsed_options.request.port;\r\n    }\r\n\r\n    const req = request(parsed_options.request, (res) => {\r\n      const response_data = [];\r\n\r\n      res.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      res.on(\"end\", () => {\r\n        res.data = RequestManager.parseResponseData(response_data, res.headers);\r\n\r\n        resolve(res);\r\n      });\r\n    }).on(\"error\", (error) => {\r\n      reject(error);\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    req.end();\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport { request } from \"https\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTPS(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n    const req = request(parsed_options.request, (res) => {\r\n      const response_data = [];\r\n\r\n      res.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      res.on(\"end\", () => {\r\n        res.data = RequestManager.parseResponseData(response_data, res.headers);\r\n\r\n        resolve(res);\r\n      });\r\n    }).on(\"error\", (error) => {\r\n      reject(error);\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    req.end();\r\n  });\r\n};\r\n","import request from \"./functions/Request.js\";\r\nimport session from \"./structures/Session.js\";\r\n\r\n[\r\n  \"get\",\r\n  \"post\",\r\n  \"patch\",\r\n  \"options\",\r\n  \"delete\",\r\n  \"head\",\r\n  \"put\",\r\n  \"link\",\r\n  \"unlink\",\r\n  \"purge\",\r\n].forEach((method) => {\r\n  request[method] = (options) => request({ ...options, method });\r\n});\r\n\r\nassert.equal(request.Session, session);\r\n\r\nexport default request;\r\n","\"use strict\";\r\n\r\nimport Request from \"../functions/Request.js\";\r\n\r\nclass Session {\r\n  constructor() {\r\n    this.cookies = \"\";\r\n  }\r\n\r\n  async req(options) {\r\n    const parsed_options = this.addCookiesInOptions(options);\r\n    const response = await Request(parsed_options);\r\n\r\n    try {\r\n      if (response.headers[\"set-cookie\"]) {\r\n        if (this.cookies)\r\n          this.cookies +=\r\n            \"; \" +\r\n            response.headers[\"set-cookie\"]\r\n              .map((c) => c.split(\";\")[0])\r\n              .join(\"; \");\r\n        else\r\n          this.cookies = response.headers[\"set-cookie\"]\r\n            .map((c) => c.split(\";\")[0])\r\n            .join(\"; \");\r\n      }\r\n    } catch (error) {}\r\n\r\n    return response;\r\n  }\r\n\r\n  addCookie(cookie) {\r\n    if (typeof cookie == \"object\") {\r\n      if (this.cookies.includes(cookie.name)) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      }\r\n    } else {\r\n      if (this.cookies.includes(cookie.split(\"=\")[0])) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.trim()}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.trim()}`;\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  removeCookie(cookie_name) {\r\n    if (this.cookies.includes(cookie_name)) {\r\n      this.cookies = this.cookies.replace(\r\n        this.cookies.slice(this.cookies.indexOf(cookie_name)).split(\" \")[0],\r\n        \"\"\r\n      );\r\n\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  addCookiesInOptions(options) {\r\n    if (this.cookies) {\r\n      if (options.headers && options.headers?.cookie) {\r\n        options.headers.cookie += \"; \" + this.cookies;\r\n      } else {\r\n        options.headers.cookie = this.cookies;\r\n      }\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  json() {\r\n    const object = {};\r\n\r\n    for (const cookie of this.cookies.split(\"; \")) {\r\n      const [name, ...value] = cookie.split(\"=\");\r\n\r\n      if (name) {\r\n        object[name] = value.join(\"=\");\r\n      }\r\n    }\r\n    return object;\r\n  }\r\n}\r\n\r\nexport default Session;\r\n"],"names":["HTTP2_HEADER_PATH","HTTP2_HEADER_METHOD","HTTP2_HEADER_SCHEME","HTTP2_HEADER_AUTHORITY","constants","RequestManager$1","constructor","this","midia_types","proxyParse","text","input","protocol","split","includes","substring","lastIndexOf","host","port","parseInt","username","password","proxyTunnel","url","proxy","headers","timeout","Promise","resolve","reject","urlParsed","URL","parsed_proxy","Buffer","from","toString","request","method","maxVersion","path","hostname","on","response","socket","statusCode","err","end","parseResponseData","arr_data","buffer","concat","data","JSON","parse","error","some","type","async","options","parsed_url","payload","stringify","String","http2","client","ALPNProtocols","pathname","search","toUpperCase","length","Accept","agent","Agent","catch","keepAlive","origin","href","accept","HTTP2_HEADER_STATUS","Request","parsed_options","RequestManager","parseOptions","clientSession","connect","req","response_data","chunk","push","close","status","write","__HTTP2","res","__HTTP","__HTTPS","forEach","assert","equal","Session","cookies","addCookiesInOptions","map","c","join","addCookie","cookie","name","value","trim","removeCookie","cookie_name","replace","slice","indexOf","json","object"],"mappings":"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"}