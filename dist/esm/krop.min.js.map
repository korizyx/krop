{"version":3,"file":"krop.min.js","sources":["../../lib/structures/RequestManager.js","../../lib/functions/HTTP2.js","../../lib/functions/Request.js","../../lib/functions/HTTP.js","../../lib/functions/HTTPS.js","../../lib/structures/Session.js","../../lib/Index.js"],"sourcesContent":["\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport { Agent } from \"https\";\r\nimport { constants } from \"http2\";\r\nimport { gunzip, brotliDecompress, inflate } from \"zlib\";\r\n\r\nconst {\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_AUTHORITY,\r\n} = constants;\r\n\r\nclass RequestManager {\r\n  constructor() {\r\n    this.midia_types = [\"image\", \"video\", \"audio\", \"font\"];\r\n  }\r\n\r\n  proxyParse(text) {\r\n    var input = text;\r\n\r\n    const protocol = input.split(\"://\")[0];\r\n\r\n    if (input.includes(\"@\"))\r\n      input = input.substring(input.lastIndexOf(\"@\") + 1);\r\n    else if (input.includes(\"://\")) input = input.split(\"://\")[1];\r\n\r\n    const host = input.split(\":\")[0];\r\n    const port = parseInt(input.split(\":\")[1]);\r\n\r\n    input = text.split(\"://\")[1];\r\n\r\n    input = text.substring(0, text.lastIndexOf(\"@\"));\r\n    const [username, password] = input.split(\":\");\r\n\r\n    return { host, port, protocol: protocol || \"https\", username, password };\r\n  }\r\n\r\n  proxyTunnel(url, proxy, headers = {}, timeout = 15000) {\r\n    return new Promise((resolve, reject) => {\r\n      const urlParsed = new URL(url);\r\n      const parsed_proxy =\r\n        typeof proxy == \"object\" ? proxy : this.proxyParse(proxy);\r\n\r\n      if (parsed_proxy.username) {\r\n        headers[\"Proxy-Authorization\"] =\r\n          \"Basic \" +\r\n          Buffer.from(\r\n            parsed_proxy.username + \":\" + parsed_proxy.password\r\n          ).toString(\"base64\");\r\n      }\r\n\r\n      request({\r\n        host: parsed_proxy.host,\r\n        port: parsed_proxy.port,\r\n        method: \"CONNECT\",\r\n        // maxVersion: \"TLSv1.3\",\r\n        path: `${urlParsed.hostname}:${urlParsed.port ? urlParsed.port : 443}`,\r\n        timeout,\r\n        headers,\r\n      })\r\n        .on(\"connect\", (response, socket) => {\r\n          if (response.statusCode <= 299) {\r\n            resolve(socket);\r\n          } else {\r\n            reject(response);\r\n          }\r\n        })\r\n        .on(\"error\", (err) => reject(err))\r\n        .on(\"timeout\", (err) => reject(\"timeout to connect in proxy\"))\r\n        .end();\r\n    });\r\n  }\r\n\r\n  decompress(arr_data, headers) {\r\n    return new Promise((resolve, reject) => {\r\n      const buffer = Buffer.concat(arr_data);\r\n\r\n      if (headers[\"content-encoding\"]?.includes(\"gzip\")) {\r\n        gunzip(buffer, (err, dezipped) => {\r\n          resolve(dezipped.toString());\r\n        });\r\n      } else if (headers[\"content-encoding\"]?.includes(\"br\")) {\r\n        brotliDecompress(buffer, (err, dezipped) => {\r\n          resolve(dezipped.toString());\r\n        });\r\n      } else if (headers[\"content-encoding\"]?.includes(\"deflate\")) {\r\n        inflate(buffer, (err, dezipped) => {\r\n          resolve(dezipped.toString());\r\n        });\r\n      } else {\r\n        resolve(buffer.toString());\r\n      }\r\n    });\r\n  }\r\n\r\n  async parseResponseData(arr_data, headers) {\r\n    var data = await this.decompress(arr_data, headers);\r\n\r\n    try {\r\n      data = JSON.parse(data);\r\n    } catch (error) {\r\n      if (\r\n        headers[\"content-type\"] &&\r\n        this.midia_types.some((type) => headers[\"content-type\"].includes(type))\r\n      ) {\r\n        data = Buffer.concat(arr_data);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async parseOptions(options = {}) {\r\n    try {\r\n      const parsed_url = new URL(options.url);\r\n\r\n      const buffer = Buffer.from(\r\n        typeof options.payload == \"object\"\r\n          ? JSON.stringify(options.payload)\r\n          : typeof options.payload != \"string\" && options.payload\r\n          ? String(options.payload)\r\n          : options.payload || \"\"\r\n      );\r\n\r\n      if (options.http2) {\r\n        if (options.proxy) {\r\n          options.socket = await this.proxyTunnel(options.url, options.proxy);\r\n        }\r\n\r\n        return {\r\n          url: options.url,\r\n          payload: buffer,\r\n          client: {\r\n            maxVersion: options?.tlsVersion || null,\r\n            ALPNProtocols: [\"h2\", \"http/1.1\"],\r\n            socket: options.socket,\r\n            ciphers: options?.ciphers || null,\r\n          },\r\n          request: {\r\n            [HTTP2_HEADER_AUTHORITY]: parsed_url.host,\r\n            [HTTP2_HEADER_PATH]: parsed_url.pathname + parsed_url.search || \"/\",\r\n            [HTTP2_HEADER_SCHEME]: parsed_url.protocol.split(\":\")[0],\r\n            [HTTP2_HEADER_METHOD]:\r\n              constants[`HTTP2_METHOD_${options.method?.toUpperCase()}`],\r\n            \"Content-Type\": \"text/plain\",\r\n            \"Content-Length\": buffer.length,\r\n            Accept: \"*/*, image/*\",\r\n            ...options?.headers,\r\n          },\r\n          __Socket: options?.socket || null,\r\n        };\r\n      } else {\r\n        if (options.proxy) {\r\n          options.__Socket = await this.proxyTunnel(\r\n            options.url,\r\n            options.proxy\r\n          ).catch((error) => {\r\n            throw error;\r\n          });\r\n          options.agent = new Agent({\r\n            socket: options.__Socket,\r\n            keepAlive: true,\r\n          });\r\n        } else {\r\n          options.agent = new Agent(options);\r\n        }\r\n\r\n        return {\r\n          url: options.url,\r\n          payload: buffer,\r\n          request: {\r\n            origin: parsed_url.origin,\r\n            href: parsed_url.href,\r\n            protocol: parsed_url.protocol || \"https:\",\r\n            hostname: parsed_url.hostname,\r\n            path: parsed_url.pathname + parsed_url.search || \"/\",\r\n            port: parsed_url.port || 443,\r\n            method: options.method?.toUpperCase() || \"GET\",\r\n            maxVersion: options?.tlsVersion || null,\r\n            timeout: options.timeout || 15000,\r\n            ciphers: options?.ciphers || null,\r\n            headers: {\r\n              accept: \"application/json, text/plain, image/*, */*\",\r\n              \"accept-language\": \"en-US,en;q=0.9\",\r\n              \"Content-Length\": buffer.length,\r\n              ...options?.headers,\r\n            },\r\n            ...options,\r\n            __Socket: options?.__Socket || null,\r\n          },\r\n        };\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new RequestManager();\r\n","import { connect, constants } from \"http2\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nconst { HTTP2_HEADER_STATUS } = constants;\r\n\r\nexport default function HTTP2(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n      const clientSession = connect(new URL(parsed_options.url), {\r\n        ...parsed_options.client,\r\n        peerMaxConcurrentStreams: Infinity,\r\n      });\r\n\r\n      clientSession.on(\"error\", reject);\r\n\r\n      const req = clientSession.request({ ...parsed_options.request });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      const response_data = [];\r\n      var headers;\r\n\r\n      req.once(\"response\", (_headers) => {\r\n        headers = _headers;\r\n      });\r\n\r\n      req.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      req.on(\"error\", (error) => {\r\n        reject(error);\r\n      });\r\n\r\n      req.on(\"end\", async () => {\r\n        if (parsed_options.__Socket) {\r\n          parsed_options.__Socket.destroy();\r\n        }\r\n        req.destroy();\r\n        clientSession.destroy();\r\n\r\n        resolve({\r\n          status: headers[HTTP2_HEADER_STATUS],\r\n          headers,\r\n          data: await RequestManager.parseResponseData(response_data, headers),\r\n        });\r\n      });\r\n\r\n      if (!req.readableEnded) req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport __HTTP from \"./HTTP.js\";\r\nimport __HTTPS from \"./HTTPS.js\";\r\nimport __HTTP2 from \"./HTTP2.js\";\r\n\r\nconst ciphers = [\r\n  \"TLS_AES_256_GCM_SHA384\",\r\n  \"TLS_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_AES_128_GCM_SHA256\",\r\n  \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\r\n  \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\r\n  \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\r\n  \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\r\n].join(\":\");\r\n\r\nfunction Request(...args) {\r\n  const url = args.find((v) => typeof v == \"string\") || \"\";\r\n  const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n  if (!options?.url) options.url = url;\r\n\r\n  options.url.includes(\"http:\") || options.url.includes(\"https:\")\r\n    ? null\r\n    : (options.url = `https://${options.url}`);\r\n\r\n  try {\r\n    return options.http2\r\n      ? __HTTP2(options)\r\n      : options.url.includes(\"http:\")\r\n      ? __HTTP(options)\r\n      : __HTTPS(options);\r\n  } catch (error) {\r\n    if (options?.retry && options.retry > 0) {\r\n      --options.retry;\r\n      return Request(options);\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nRequest.BETTER_CIPHERS = ciphers;\r\n\r\nexport default Request;\r\n","\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTP(options = {}) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n      delete parsed_options.request.agent;\r\n\r\n      if (parsed_options.request.port == 443) {\r\n        delete parsed_options.request.port;\r\n      }\r\n\r\n      const req = request(parsed_options.request, (res) => {\r\n        const response_data = [];\r\n\r\n        res.on(\"data\", (chunk) => {\r\n          response_data.push(chunk);\r\n        });\r\n\r\n        res.on(\"end\", async () => {\r\n          res.status = res.statusCode;\r\n          res.data = await RequestManager.parseResponseData(\r\n            response_data,\r\n            res.headers\r\n          );\r\n\r\n          if (parsed_options.__Socket) parsed_options.__Socket.destroy();\r\n\r\n          resolve(res);\r\n        });\r\n      }).on(\"error\", (error) => {\r\n        reject(error);\r\n      });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport { request } from \"https\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTPS(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n      const req = request({ ...parsed_options.request }, (res) => {\r\n        const response_data = [];\r\n\r\n        res.on(\"data\", (chunk) => {\r\n          response_data.push(chunk);\r\n        });\r\n\r\n        res.on(\"end\", async () => {\r\n          res.status = res.statusCode;\r\n          res.data = await RequestManager.parseResponseData(\r\n            response_data,\r\n            res.headers\r\n          );\r\n          \r\n          if (parsed_options.request.__Socket) {\r\n            parsed_options.request.__Socket.destroy();\r\n          }\r\n          resolve(res);\r\n        });\r\n      }).on(\"error\", (error) => {\r\n        reject(error);\r\n      });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport Request from \"../functions/Request.js\";\r\n\r\nclass Session {\r\n  constructor(default_options = {}) {\r\n    this.default_options = default_options;\r\n    this.cookies = \"\";\r\n  }\r\n\r\n  async req(...args) {\r\n    try {\r\n      const url = args.find((v) => typeof v == \"string\") || \"\";\r\n      const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n      if (!options?.url) options.url = url;\r\n\r\n      const parsed_options = this.addCookiesInOptions({\r\n        ...this.default_options,\r\n        ...options,\r\n        headers: {\r\n          ...this.default_options?.headers,\r\n          ...options?.headers,\r\n        },\r\n      });\r\n\r\n      const response = await Request(parsed_options);\r\n\r\n      try {\r\n        if (response.headers[\"set-cookie\"]) {\r\n          if (this.cookies) {\r\n            const session_cookies = this.json();\r\n            const response_cookies = this.json(\r\n              response.headers[\"set-cookie\"]\r\n                .map((c) => c.split(\";\")[0])\r\n                .join(\"; \")\r\n            );\r\n\r\n            const interweaving = {\r\n              ...session_cookies,\r\n              ...response_cookies,\r\n            };\r\n\r\n            var str = \"\";\r\n\r\n            for (const key of Object.keys(interweaving)) {\r\n              str += `${key}=${interweaving[key]}; `;\r\n            }\r\n\r\n            this.cookies = str.slice(0, -2);\r\n          } else {\r\n            this.cookies = response.headers[\"set-cookie\"]\r\n              .map((c) => c.split(\";\")[0])\r\n              .join(\"; \");\r\n          }\r\n        }\r\n      } catch (_error) {\r\n        throw _error;\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addCookie(cookie) {\r\n    if (typeof cookie == \"object\") {\r\n      if (this.cookies.includes(cookie.name)) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      }\r\n    } else {\r\n      if (this.cookies.includes(cookie.split(\"=\")[0])) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.trim()}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.trim()}`;\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  removeCookie(cookie_name) {\r\n    if (this.cookies.includes(cookie_name)) {\r\n      this.cookies = this.cookies.replace(\r\n        this.cookies.slice(this.cookies.indexOf(cookie_name)).split(\" \")[0],\r\n        \"\"\r\n      );\r\n\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  addCookiesInOptions(options) {\r\n    if (this.cookies) {\r\n      if (options.headers && options.headers?.cookie) {\r\n        options.headers.cookie += \"; \" + this.cookies;\r\n      } else {\r\n        options.headers.cookie = this.cookies;\r\n      }\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  json(str, encode = true) {\r\n    const object = {};\r\n\r\n    for (const cookie of (str || this.cookies).split(\"; \")) {\r\n      const [name, ...value] = cookie.split(\"=\");\r\n\r\n      if (name) {\r\n        object[name] = encode\r\n          ? encodeURIComponent(value.join(\"=\"))\r\n          : value.join(\"=\");\r\n      }\r\n    }\r\n\r\n    return object;\r\n  }\r\n}\r\n\r\nexport default Session;\r\n","import _request from \"./functions/Request.js\";\r\nimport _Session from \"./structures/Session.js\";\r\nimport assert from \"assert\";\r\n\r\n[\r\n  \"get\",\r\n  \"post\",\r\n  \"patch\",\r\n  \"options\",\r\n  \"delete\",\r\n  \"head\",\r\n  \"put\",\r\n  \"link\",\r\n  \"unlink\",\r\n  \"purge\",\r\n].forEach((method) => {\r\n  _request[method] = (options) => _request({ ...options, method });\r\n});\r\n\r\n_request.Session = _Session;\r\nassert.equal(_request.Session, _Session);\r\n\r\nconst request = _request;\r\n\r\nexport default request;\r\n"],"names":["HTTP2_HEADER_PATH","HTTP2_HEADER_METHOD","HTTP2_HEADER_SCHEME","HTTP2_HEADER_AUTHORITY","constants","RequestManager$1","constructor","this","midia_types","proxyParse","text","input","protocol","split","includes","substring","lastIndexOf","host","port","parseInt","username","password","proxyTunnel","url","proxy","headers","timeout","Promise","resolve","reject","urlParsed","URL","parsed_proxy","Buffer","from","toString","request","method","path","hostname","on","response","socket","statusCode","err","end","decompress","arr_data","buffer","concat","gunzip","dezipped","brotliDecompress","inflate","parseResponseData","data","JSON","parse","error","some","type","parseOptions","options","parsed_url","payload","stringify","String","http2","client","maxVersion","tlsVersion","ALPNProtocols","ciphers","pathname","search","toUpperCase","length","Accept","__Socket","catch","agent","Agent","keepAlive","origin","href","accept","HTTP2_HEADER_STATUS","join","Request","args","find","v","async","parsed_options","RequestManager","clientSession","connect","peerMaxConcurrentStreams","Infinity","req","write","response_data","once","_headers","chunk","push","destroy","status","readableEnded","__HTTP2","res","__HTTP","__HTTPS","retry","BETTER_CIPHERS","Session","default_options","cookies","addCookiesInOptions","session_cookies","json","response_cookies","map","c","interweaving","str","key","Object","keys","slice","_error","addCookie","cookie","name","value","trim","removeCookie","cookie_name","replace","indexOf","encode","object","encodeURIComponent","forEach","_request","_Session","assert","equal"],"mappings":"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"}