{"version":3,"file":"krop.js","sources":["../lib/structures/RequestManager.js","../lib/functions/HTTP.js","../lib/functions/HTTPS.js","../lib/functions/HTTP2.js","../lib/functions/Request.js","../lib/structures/Session.js","../lib/Index.js"],"sourcesContent":["\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport { Agent } from \"https\";\r\nimport { constants } from \"http2\";\r\n\r\nconst {\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_AUTHORITY,\r\n} = constants;\r\n\r\nclass RequestManager {\r\n  constructor() {\r\n    this.midia_types = [\"image\", \"video\", \"audio\", \"font\"];\r\n  }\r\n\r\n  proxyParse(text) {\r\n    var input = text;\r\n\r\n    const protocol = input.split(\"://\")[0];\r\n\r\n    if (input.includes(\"@\"))\r\n      input = input.substring(input.lastIndexOf(\"@\") + 1);\r\n    else if (input.includes(\"://\")) input = input.split(\"://\")[1];\r\n\r\n    const host = input.split(\":\")[0];\r\n    const port = parseInt(input.split(\":\")[1]);\r\n\r\n    input = text.split(\"://\")[1];\r\n\r\n    input = text.substring(0, text.lastIndexOf(\"@\"));\r\n    const [username, password] = input.split(\":\");\r\n\r\n    return { host, port, protocol: protocol || \"https\", username, password };\r\n  }\r\n\r\n  proxyTunnel(url, proxy, headers = {}, timeout = 15000) {\r\n    return new Promise((resolve, reject) => {\r\n      const urlParsed = new URL(url);\r\n      const parsed_proxy =\r\n        typeof proxy == \"object\" ? proxy : this.proxyParse(proxy);\r\n\r\n      if (parsed_proxy.username) {\r\n        headers[\"Proxy-Authorization\"] =\r\n          \"Basic \" +\r\n          Buffer.from(\r\n            parsed_proxy.username + \":\" + parsed_proxy.password\r\n          ).toString(\"base64\");\r\n      }\r\n\r\n      request({\r\n        host: parsed_proxy.host,\r\n        port: parsed_proxy.port,\r\n        method: \"CONNECT\",\r\n        maxVersion: \"TLSv1.3\",\r\n        path: `${urlParsed.hostname}:${urlParsed.port ? urlParsed.port : 443}`,\r\n        timeout,\r\n        headers,\r\n      })\r\n        .on(\"connect\", (response, socket) => {\r\n          if (response.statusCode == 200) {\r\n            resolve(socket);\r\n          } else {\r\n            reject(response);\r\n          }\r\n        })\r\n        .on(\"error\", (err) => reject(err))\r\n        .on(\"timeout\", (err) => reject(\"timeout to connect in proxy\"))\r\n        .end();\r\n    });\r\n  }\r\n\r\n  parseResponseData(arr_data, headers) {\r\n    const buffer = Buffer.concat(arr_data);\r\n    var data;\r\n\r\n    try {\r\n      data = JSON.parse(buffer.toString());\r\n    } catch (error) {\r\n      if (\r\n        headers[\"content-type\"] &&\r\n        this.midia_types.some((type) => headers[\"content-type\"].includes(type))\r\n      ) {\r\n        data = buffer;\r\n      } else {\r\n        data = buffer.toString();\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async parseOptions(options = {}) {\r\n    const parsed_url = new URL(options.url);\r\n\r\n    const buffer = Buffer.from(\r\n      typeof options.payload == \"object\"\r\n        ? JSON.stringify(options.payload)\r\n        : typeof options.payload != \"string\" && options.payload\r\n        ? String(options.payload)\r\n        : options.payload || \"\"\r\n    );\r\n\r\n    if (options.http2) {\r\n      if (options.proxy) {\r\n        options.socket = await this.proxyTunnel(options.url, options.proxy);\r\n      }\r\n\r\n      return {\r\n        url: options.url,\r\n        payload: buffer,\r\n        client: {\r\n          maxVersion: \"TLSv1.3\",\r\n          ALPNProtocols: [\"h2\", \"http/1.1\"],\r\n          socket: options.socket,\r\n        },\r\n        request: {\r\n          [HTTP2_HEADER_AUTHORITY]: parsed_url.host,\r\n          [HTTP2_HEADER_PATH]: parsed_url.pathname + parsed_url.search || \"/\",\r\n          [HTTP2_HEADER_SCHEME]: parsed_url.protocol.split(\":\")[0],\r\n          [HTTP2_HEADER_METHOD]:\r\n            constants[`HTTP2_METHOD_${options.method?.toUpperCase()}`],\r\n          \"Content-Type\": \"text/plain\",\r\n          \"Content-Length\": buffer.length,\r\n          Accept: \"*/*, image/*\",\r\n          ...options?.headers,\r\n        },\r\n      };\r\n    } else {\r\n      if (options.proxy) {\r\n        options.agent = new Agent({\r\n          socket: await this.proxyTunnel(options.url, options.proxy).catch(\r\n            (error) => {\r\n              throw error;\r\n            }\r\n          ),\r\n          keepAlive: true,\r\n        });\r\n      } else {\r\n        options.agent = new Agent(options);\r\n      }\r\n\r\n      return {\r\n        url: options.url,\r\n        payload: buffer,\r\n        request: {\r\n          origin: parsed_url.origin,\r\n          href: parsed_url.href,\r\n          protocol: parsed_url.protocol || \"https:\",\r\n          hostname: parsed_url.hostname,\r\n          path: parsed_url.pathname + parsed_url.search || \"/\",\r\n          port: parsed_url.port || 443,\r\n          method: options.method?.toUpperCase() || \"GET\",\r\n          maxVersion: \"TLSv1.3\",\r\n          timeout: options.timeout || 15000,\r\n          headers: {\r\n            accept: \"application/json, text/plain, image/*, */*\",\r\n            \"accept-language\": \"en-US,en;q=0.9\",\r\n            \"Content-Length\": buffer.length,\r\n            ...options?.headers,\r\n          },\r\n          ...options,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new RequestManager();\r\n","\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTP(options = {}) {\r\n  return new Promise(async (resolve, reject) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n    delete parsed_options.request.agent;\r\n\r\n    if (parsed_options.request.port == 443) {\r\n      delete parsed_options.request.port;\r\n    }\r\n\r\n    const req = request(parsed_options.request, (res) => {\r\n      const response_data = [];\r\n\r\n      res.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      res.on(\"end\", () => {\r\n        res.status = res.statusCode;\r\n        res.data = RequestManager.parseResponseData(response_data, res.headers);\r\n\r\n        resolve(res);\r\n      });\r\n    }).on(\"error\", (error) => {\r\n      reject(error);\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    req.end();\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport { request } from \"https\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTPS(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n    const req = request(parsed_options.request, (res) => {\r\n      const response_data = [];\r\n\r\n      res.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      res.on(\"end\", () => {\r\n        res.status = res.statusCode;\r\n        res.data = RequestManager.parseResponseData(response_data, res.headers);\r\n\r\n        resolve(res);\r\n      });\r\n    }).on(\"error\", (error) => {\r\n      reject(error);\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    req.end();\r\n  });\r\n}\r\n","import { connect, constants } from \"http2\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nconst { HTTP2_HEADER_STATUS } = constants;\r\n\r\nexport default function HTTP2(options) {\r\n  return new Promise(async (resolve) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n    const clientSession = connect(\r\n      new URL(parsed_options.url),\r\n      parsed_options.client\r\n    );\r\n\r\n    const req = clientSession.request(parsed_options.request);\r\n\r\n    req.once(\"response\", (headers) => {\r\n      const response_data = [];\r\n\r\n      req.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      req.once(\"error\", console.log);\r\n\r\n      req.on(\"end\", async () => {\r\n        req.destroy();\r\n        clientSession.destroy();\r\n\r\n        resolve({\r\n          status: headers[HTTP2_HEADER_STATUS],\r\n          headers,\r\n          data: Buffer.concat(response_data), //RequestManager.parseResponseData(response_data, headers),\r\n        });\r\n      });\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    if (!req.readableEnded) req.end();\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport __HTTP from \"./HTTP.js\";\r\nimport __HTTPS from \"./HTTPS.js\";\r\nimport __HTTP2 from \"./HTTP2.js\";\r\n\r\nfunction Request(...args) {\r\n  const url = args.find((v) => typeof v == \"string\") || \"\";\r\n  const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n  if (!options?.url) options.url = url;\r\n\r\n  options.url.includes(\"http:\") || options.url.includes(\"https:\")\r\n    ? null\r\n    : (options.url = `https://${options.url}`);\r\n\r\n  return options.http2\r\n    ? __HTTP2(options)\r\n    : options.url.includes(\"http:\")\r\n    ? __HTTP(options)\r\n    : __HTTPS(options);\r\n}\r\n\r\nexport default Request;\r\n","\"use strict\";\r\n\r\nimport Request from \"../functions/Request.js\";\r\n\r\nclass Session {\r\n  constructor(default_options = {}) {\r\n    this.default_options = default_options;\r\n    this.cookies = \"\";\r\n  }\r\n\r\n  async req(...args) {\r\n    const url = args.find((v) => typeof v == \"string\") || \"\";\r\n    const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n    if (!options?.url) options.url = url;\r\n\r\n    const parsed_options = this.addCookiesInOptions({\r\n      ...this.default_options,\r\n      ...options,\r\n      headers: {\r\n        ...this.default_options?.headers,\r\n        ...options?.headers,\r\n      },\r\n    });\r\n\r\n    const response = await Request(parsed_options);\r\n\r\n    try {\r\n      if (response.headers[\"set-cookie\"]) {\r\n        if (this.cookies) {\r\n          const session_cookies = this.json();\r\n          const response_cookies = this.json(\r\n            response.headers[\"set-cookie\"]\r\n              .map((c) => c.split(\";\")[0])\r\n              .join(\"; \")\r\n          );\r\n\r\n          const interweaving = {\r\n            ...session_cookies,\r\n            ...response_cookies,\r\n          };\r\n\r\n          var str = \"\";\r\n\r\n          for (const key of Object.keys(interweaving)) {\r\n            str += `${key}=${interweaving[key]}; `;\r\n          }\r\n\r\n          this.cookies = str.slice(0, -2);\r\n        } else {\r\n          this.cookies = response.headers[\"set-cookie\"]\r\n            .map((c) => c.split(\";\")[0])\r\n            .join(\"; \");\r\n        }\r\n      }\r\n    } catch (error) {}\r\n\r\n    return response;\r\n  }\r\n\r\n  addCookie(cookie) {\r\n    if (typeof cookie == \"object\") {\r\n      if (this.cookies.includes(cookie.name)) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      }\r\n    } else {\r\n      if (this.cookies.includes(cookie.split(\"=\")[0])) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.trim()}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.trim()}`;\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  removeCookie(cookie_name) {\r\n    if (this.cookies.includes(cookie_name)) {\r\n      this.cookies = this.cookies.replace(\r\n        this.cookies.slice(this.cookies.indexOf(cookie_name)).split(\" \")[0],\r\n        \"\"\r\n      );\r\n\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  addCookiesInOptions(options) {\r\n    if (this.cookies) {\r\n      if (options.headers && options.headers?.cookie) {\r\n        options.headers.cookie += \"; \" + this.cookies;\r\n      } else {\r\n        options.headers.cookie = this.cookies;\r\n      }\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  json(str) {\r\n    const object = {};\r\n\r\n    for (const cookie of (str || this.cookies).split(\"; \")) {\r\n      const [name, ...value] = cookie.split(\"=\");\r\n\r\n      if (name) {\r\n        object[name] = value.join(\"=\");\r\n      }\r\n    }\r\n    \r\n    return object;\r\n  }\r\n}\r\n\r\nexport default Session;\r\n","import _request from \"./functions/Request.js\";\r\nimport _Session from \"./structures/Session.js\";\r\nimport assert from \"assert\";\r\n\r\n[\r\n  \"get\",\r\n  \"post\",\r\n  \"patch\",\r\n  \"options\",\r\n  \"delete\",\r\n  \"head\",\r\n  \"put\",\r\n  \"link\",\r\n  \"unlink\",\r\n  \"purge\",\r\n].forEach((method) => {\r\n  _request[method] = (options) => _request({ ...options, method });\r\n});\r\n\r\n_request.Session = _Session;\r\nassert.equal(_request.Session, _Session);\r\n\r\nconst request = _request;\r\n\r\nexport default request;\r\n"],"names":["HTTP2_HEADER_PATH","constants","HTTP2_HEADER_METHOD","HTTP2_HEADER_SCHEME","HTTP2_HEADER_AUTHORITY","RequestManager","_classCallCheck","midia_types","_createClass","key","value","proxyParse","text","input","protocol","split","includes","substring","lastIndexOf","host","port","parseInt","_input$split","_input$split2","_slicedToArray","username","password","proxyTunnel","url","proxy","_this","headers","arguments","length","undefined","timeout","Promise","resolve","reject","urlParsed","URL","parsed_proxy","_typeof","Buffer","from","toString","request","method","maxVersion","path","concat","hostname","on","response","socket","statusCode","err","end","parseResponseData","arr_data","buffer","data","JSON","parse","error","some","type","_parseOptions","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","parsed_url","_options$method","_objectSpread2","_options$method2","_args","wrap","_callee$","_context","prev","next","payload","stringify","String","http2","sent","abrupt","client","ALPNProtocols","_objectSpread","_defineProperty","pathname","search","toUpperCase","t0","Agent","t1","t2","keepAlive","agent","origin","href","accept","stop","parseOptions","apply","HTTP","_ref","_parsed_options$paylo","parsed_options","req","res","response_data","chunk","push","status","write","_x","_x2","HTTPS","HTTP2_HEADER_STATUS","HTTP2","_callee2","clientSession","_callee2$","_context2","connect","once","console","log","destroy","readableEnded","Request","_len","args","Array","_key","find","v","__HTTP2","__HTTP","__HTTPS","Session","default_options","cookies","_req","_this$default_options","session_cookies","response_cookies","interweaving","str","_i","_Object$keys","addCookiesInOptions","json","map","c","join","Object","keys","slice","addCookie","cookie","name","trim","removeCookie","cookie_name","replace","indexOf","_options$headers","object","_iterator","_createForOfIteratorHelper","_step","s","n","done","_cookie$split","_cookie$split2","_toArray","e","f","forEach","_request","_Session","assert","equal"],"mappings":"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"}