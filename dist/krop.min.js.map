{"version":3,"file":"krop.min.js","sources":["../lib/structures/RequestManager.js","../lib/functions/HTTP2.js","../lib/functions/Request.js","../lib/functions/HTTP.js","../lib/functions/HTTPS.js","../lib/structures/Session.js","../lib/Index.js"],"sourcesContent":["\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport { Agent } from \"https\";\r\nimport { constants } from \"http2\";\r\n\r\nconst {\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_AUTHORITY,\r\n} = constants;\r\n\r\nclass RequestManager {\r\n  constructor() {\r\n    this.midia_types = [\"image\", \"video\", \"audio\", \"font\"];\r\n  }\r\n\r\n  proxyParse(text) {\r\n    var input = text;\r\n\r\n    const protocol = input.split(\"://\")[0];\r\n\r\n    if (input.includes(\"@\"))\r\n      input = input.substring(input.lastIndexOf(\"@\") + 1);\r\n    else if (input.includes(\"://\")) input = input.split(\"://\")[1];\r\n\r\n    const host = input.split(\":\")[0];\r\n    const port = parseInt(input.split(\":\")[1]);\r\n\r\n    input = text.split(\"://\")[1];\r\n\r\n    input = text.substring(0, text.lastIndexOf(\"@\"));\r\n    const [username, password] = input.split(\":\");\r\n\r\n    return { host, port, protocol: protocol || \"https\", username, password };\r\n  }\r\n\r\n  proxyTunnel(url, proxy, headers = {}, timeout = 15000) {\r\n    return new Promise((resolve, reject) => {\r\n      const urlParsed = new URL(url);\r\n      const parsed_proxy =\r\n        typeof proxy == \"object\" ? proxy : this.proxyParse(proxy);\r\n\r\n      if (parsed_proxy.username) {\r\n        headers[\"Proxy-Authorization\"] =\r\n          \"Basic \" +\r\n          Buffer.from(\r\n            parsed_proxy.username + \":\" + parsed_proxy.password\r\n          ).toString(\"base64\");\r\n      }\r\n\r\n      request({\r\n        host: parsed_proxy.host,\r\n        port: parsed_proxy.port,\r\n        method: \"CONNECT\",\r\n        maxVersion: \"TLSv1.3\",\r\n        path: `${urlParsed.hostname}:${urlParsed.port ? urlParsed.port : 443}`,\r\n        timeout,\r\n        headers,\r\n      })\r\n        .on(\"connect\", (response, socket) => {\r\n          if (response.statusCode == 200) {\r\n            resolve(socket);\r\n          } else {\r\n            reject(response);\r\n          }\r\n        })\r\n        .on(\"error\", (err) => reject(err))\r\n        .on(\"timeout\", (err) => reject(\"timeout to connect in proxy\"))\r\n        .end();\r\n    });\r\n  }\r\n\r\n  parseResponseData(arr_data, headers) {\r\n    const buffer = Buffer.concat(arr_data);\r\n    var data;\r\n\r\n    try {\r\n      data = JSON.parse(buffer.toString());\r\n    } catch (error) {\r\n      if (\r\n        headers[\"content-type\"] &&\r\n        this.midia_types.some((type) => headers[\"content-type\"].includes(type))\r\n      ) {\r\n        data = buffer;\r\n      } else {\r\n        data = buffer.toString();\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async parseOptions(options = {}) {\r\n    const parsed_url = new URL(options.url);\r\n\r\n    const buffer = Buffer.from(\r\n      typeof options.payload == \"object\"\r\n        ? JSON.stringify(options.payload)\r\n        : typeof options.payload != \"string\" && options.payload\r\n        ? String(options.payload)\r\n        : options.payload || \"\"\r\n    );\r\n\r\n    if (options.http2) {\r\n      if (options.proxy) {\r\n        options.socket = await this.proxyTunnel(options.url, options.proxy);\r\n      }\r\n\r\n      return {\r\n        url: options.url,\r\n        payload: buffer,\r\n        client: {\r\n          maxVersion: \"TLSv1.3\",\r\n          ALPNProtocols: [\"h2\", \"http/1.1\"],\r\n          socket: options.socket,\r\n          ciphers: options?.ciphers || null,\r\n        },\r\n        request: {\r\n          [HTTP2_HEADER_AUTHORITY]: parsed_url.host,\r\n          [HTTP2_HEADER_PATH]: parsed_url.pathname + parsed_url.search || \"/\",\r\n          [HTTP2_HEADER_SCHEME]: parsed_url.protocol.split(\":\")[0],\r\n          [HTTP2_HEADER_METHOD]:\r\n            constants[`HTTP2_METHOD_${options.method?.toUpperCase()}`],\r\n          \"Content-Type\": \"text/plain\",\r\n          \"Content-Length\": buffer.length,\r\n          Accept: \"*/*, image/*\",\r\n          ...options?.headers,\r\n        },\r\n      };\r\n    } else {\r\n      if (options.proxy) {\r\n        options.agent = new Agent({\r\n          socket: await this.proxyTunnel(options.url, options.proxy).catch(\r\n            (error) => {\r\n              throw error;\r\n            }\r\n          ),\r\n          keepAlive: true,\r\n        });\r\n      } else {\r\n        options.agent = new Agent(options);\r\n      }\r\n\r\n      return {\r\n        url: options.url,\r\n        payload: buffer,\r\n        request: {\r\n          origin: parsed_url.origin,\r\n          href: parsed_url.href,\r\n          protocol: parsed_url.protocol || \"https:\",\r\n          hostname: parsed_url.hostname,\r\n          path: parsed_url.pathname + parsed_url.search || \"/\",\r\n          port: parsed_url.port || 443,\r\n          method: options.method?.toUpperCase() || \"GET\",\r\n          maxVersion: \"TLSv1.3\",\r\n          timeout: options.timeout || 15000,\r\n          ciphers: options?.ciphers || null,\r\n          headers: {\r\n            accept: \"application/json, text/plain, image/*, */*\",\r\n            \"accept-language\": \"en-US,en;q=0.9\",\r\n            \"Content-Length\": buffer.length,\r\n            ...options?.headers,\r\n          },\r\n          ...options,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new RequestManager();\r\n","import { connect, constants } from \"http2\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nconst { HTTP2_HEADER_STATUS } = constants;\r\n\r\nexport default function HTTP2(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n      const clientSession = connect(new URL(parsed_options.url), {\r\n        ...parsed_options.client,\r\n        peerMaxConcurrentStreams: Infinity,\r\n      });\r\n\r\n      clientSession.once(\"error\", console.log);\r\n\r\n      const req = clientSession.request({ ...parsed_options.request });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      const response_data = [];\r\n      var headers;\r\n\r\n      req.once(\"response\", (_headers) => {\r\n        headers = _headers;\r\n      });\r\n\r\n      req.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      req.on(\"end\", async () => {\r\n        // req.destroy();\r\n        // clientSession.destroy();\r\n\r\n        resolve({\r\n          status: headers[HTTP2_HEADER_STATUS],\r\n          headers,\r\n          data: RequestManager.parseResponseData(response_data, headers),\r\n        });\r\n      });\r\n\r\n      if (!req.readableEnded) req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport __HTTP from \"./HTTP.js\";\r\nimport __HTTPS from \"./HTTPS.js\";\r\nimport __HTTP2 from \"./HTTP2.js\";\r\n\r\nconst ciphers = [\r\n  \"TLS_AES_256_GCM_SHA384\",\r\n  \"TLS_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_AES_128_GCM_SHA256\",\r\n  \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\r\n  \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\r\n  \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\r\n  \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\r\n].join(\":\");\r\n\r\nfunction Request(...args) {\r\n  const url = args.find((v) => typeof v == \"string\") || \"\";\r\n  const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n  if (!options?.url) options.url = url;\r\n\r\n  options.url.includes(\"http:\") || options.url.includes(\"https:\")\r\n    ? null\r\n    : (options.url = `https://${options.url}`);\r\n\r\n  return options.http2\r\n    ? __HTTP2(options)\r\n    : options.url.includes(\"http:\")\r\n    ? __HTTP(options)\r\n    : __HTTPS(options);\r\n}\r\n\r\nRequest.BETTER_CIPHERS = ciphers;\r\n\r\nexport default Request;\r\n","\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTP(options = {}) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n      delete parsed_options.request.agent;\r\n\r\n      if (parsed_options.request.port == 443) {\r\n        delete parsed_options.request.port;\r\n      }\r\n\r\n      const req = request(parsed_options.request, (res) => {\r\n        const response_data = [];\r\n\r\n        res.on(\"data\", (chunk) => {\r\n          response_data.push(chunk);\r\n        });\r\n\r\n        res.on(\"end\", () => {\r\n          res.status = res.statusCode;\r\n          res.data = RequestManager.parseResponseData(\r\n            response_data,\r\n            res.headers\r\n          );\r\n\r\n          resolve(res);\r\n        });\r\n      }).on(\"error\", (error) => {\r\n        reject(error);\r\n      });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport { request } from \"https\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTPS(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n      const req = request({ ...parsed_options.request }, (res) => {\r\n        const response_data = [];\r\n\r\n        res.on(\"data\", (chunk) => {\r\n          response_data.push(chunk);\r\n        });\r\n\r\n        res.on(\"end\", () => {\r\n          res.status = res.statusCode;\r\n          res.data = RequestManager.parseResponseData(\r\n            response_data,\r\n            res.headers\r\n          );\r\n\r\n          resolve(res);\r\n        });\r\n      }).on(\"error\", (error) => {\r\n        reject(error);\r\n      });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport Request from \"../functions/Request.js\";\r\n\r\nclass Session {\r\n  constructor(default_options = {}) {\r\n    this.default_options = default_options;\r\n    this.cookies = \"\";\r\n  }\r\n\r\n  async req(...args) {\r\n    try {\r\n      const url = args.find((v) => typeof v == \"string\") || \"\";\r\n      const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n      if (!options?.url) options.url = url;\r\n\r\n      const parsed_options = this.addCookiesInOptions({\r\n        ...this.default_options,\r\n        ...options,\r\n        headers: {\r\n          ...this.default_options?.headers,\r\n          ...options?.headers,\r\n        },\r\n      });\r\n\r\n      const response = await Request(parsed_options);\r\n\r\n      try {\r\n        if (response.headers[\"set-cookie\"]) {\r\n          if (this.cookies) {\r\n            const session_cookies = this.json();\r\n            const response_cookies = this.json(\r\n              response.headers[\"set-cookie\"]\r\n                .map((c) => c.split(\";\")[0])\r\n                .join(\"; \")\r\n            );\r\n\r\n            const interweaving = {\r\n              ...session_cookies,\r\n              ...response_cookies,\r\n            };\r\n\r\n            var str = \"\";\r\n\r\n            for (const key of Object.keys(interweaving)) {\r\n              str += `${key}=${interweaving[key]}; `;\r\n            }\r\n\r\n            this.cookies = str.slice(0, -2);\r\n          } else {\r\n            this.cookies = response.headers[\"set-cookie\"]\r\n              .map((c) => c.split(\";\")[0])\r\n              .join(\"; \");\r\n          }\r\n        }\r\n      } catch (_error) {\r\n        throw _error;\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addCookie(cookie) {\r\n    if (typeof cookie == \"object\") {\r\n      if (this.cookies.includes(cookie.name)) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      }\r\n    } else {\r\n      if (this.cookies.includes(cookie.split(\"=\")[0])) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.trim()}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.trim()}`;\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  removeCookie(cookie_name) {\r\n    if (this.cookies.includes(cookie_name)) {\r\n      this.cookies = this.cookies.replace(\r\n        this.cookies.slice(this.cookies.indexOf(cookie_name)).split(\" \")[0],\r\n        \"\"\r\n      );\r\n\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  addCookiesInOptions(options) {\r\n    if (this.cookies) {\r\n      if (options.headers && options.headers?.cookie) {\r\n        options.headers.cookie += \"; \" + this.cookies;\r\n      } else {\r\n        options.headers.cookie = this.cookies;\r\n      }\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  json(str, encode = true) {\r\n    const object = {};\r\n\r\n    for (const cookie of (str || this.cookies).split(\"; \")) {\r\n      const [name, ...value] = cookie.split(\"=\");\r\n\r\n      if (name) {\r\n        object[name] = encode\r\n          ? encodeURIComponent(value.join(\"=\"))\r\n          : value.join(\"=\");\r\n      }\r\n    }\r\n\r\n    return object;\r\n  }\r\n}\r\n\r\nexport default Session;\r\n","import _request from \"./functions/Request.js\";\r\nimport _Session from \"./structures/Session.js\";\r\nimport assert from \"assert\";\r\n\r\n[\r\n  \"get\",\r\n  \"post\",\r\n  \"patch\",\r\n  \"options\",\r\n  \"delete\",\r\n  \"head\",\r\n  \"put\",\r\n  \"link\",\r\n  \"unlink\",\r\n  \"purge\",\r\n].forEach((method) => {\r\n  _request[method] = (options) => _request({ ...options, method });\r\n});\r\n\r\n_request.Session = _Session;\r\nassert.equal(_request.Session, _Session);\r\n\r\nconst request = _request;\r\n\r\nexport default request;\r\n"],"names":["HTTP2_HEADER_PATH","constants","HTTP2_HEADER_METHOD","HTTP2_HEADER_SCHEME","HTTP2_HEADER_AUTHORITY","RequestManager","_classCallCheck","this","midia_types","_parseOptions","_createClass","key","value","text","input","protocol","split","includes","substring","lastIndexOf","host","port","parseInt","_input$split2","_slicedToArray","username","password","url","proxy","_this","headers","arguments","length","undefined","timeout","Promise","resolve","reject","urlParsed","URL","parsed_proxy","_typeof","proxyParse","Buffer","from","toString","request","method","maxVersion","path","concat","hostname","on","response","socket","statusCode","err","end","arr_data","data","buffer","JSON","parse","error","some","type","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","parsed_url","_options$method","_objectSpread2","_options$method2","_args","wrap","_context","prev","next","payload","stringify","String","http2","proxyTunnel","sent","abrupt","client","ALPNProtocols","ciphers","_objectSpread","_defineProperty","pathname","search","toUpperCase","t0","Agent","t1","t2","keepAlive","agent","origin","href","accept","stop","apply","RequestManager$1","HTTP2_HEADER_STATUS","join","Request","_len","args","Array","_key","find","v","_ref","_callee2","_parsed_options$paylo","parsed_options","clientSession","req","response_data","_context2","parseOptions","connect","peerMaxConcurrentStreams","Infinity","once","console","log","write","_headers","chunk","push","status","parseResponseData","readableEnded","_x","_x2","__HTTP2","res","__HTTP","__HTTPS","BETTER_CIPHERS","Session","default_options","cookies","_req","_this$default_options","session_cookies","response_cookies","interweaving","str","_i","_Object$keys","addCookiesInOptions","json","map","c","Object","keys","slice","cookie","name","trim","cookie_name","replace","indexOf","_options$headers","_step","encode","object","_iterator","_createForOfIteratorHelper","s","n","done","_cookie$split2","_toArray","encodeURIComponent","e","f","forEach","_request","_Session","assert","equal"],"mappings":"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"}