{"version":3,"file":"krop.js","sources":["../lib/structures/RequestManager.js","../lib/functions/HTTP.js","../lib/functions/HTTPS.js","../lib/functions/HTTP2.js","../lib/functions/Request.js","../lib/structures/Session.js","../lib/Index.js"],"sourcesContent":["\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport { Agent } from \"https\";\r\nimport { constants } from \"http2\";\r\nimport { createBrotliDecompress, createGunzip, createInflate } from \"zlib\";\r\n\r\nconst {\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_AUTHORITY,\r\n} = constants;\r\n\r\nclass RequestManager {\r\n  constructor() {\r\n    this.midia_types = [\"image\", \"video\", \"audio\", \"font\"];\r\n  }\r\n\r\n  proxyParse(text) {\r\n    var input = text;\r\n\r\n    const protocol = input.split(\"://\")[0];\r\n\r\n    if (input.includes(\"@\"))\r\n      input = input.substring(input.lastIndexOf(\"@\") + 1);\r\n    else if (input.includes(\"://\")) input = input.split(\"://\")[1];\r\n\r\n    const host = input.split(\":\")[0];\r\n    const port = parseInt(input.split(\":\")[1]);\r\n\r\n    input = text.split(\"://\")[1];\r\n\r\n    input = text.substring(0, text.lastIndexOf(\"@\"));\r\n    const [username, password] = input.split(\":\");\r\n\r\n    return { host, port, protocol: protocol || \"https\", username, password };\r\n  }\r\n\r\n  proxyTunnel(url, proxy, headers = {}, timeout = 15000) {\r\n    return new Promise((resolve, reject) => {\r\n      const urlParsed = new URL(url);\r\n      const parsed_proxy =\r\n        typeof proxy == \"object\" ? proxy : this.proxyParse(proxy);\r\n\r\n      if (parsed_proxy.username) {\r\n        headers[\"Proxy-Authorization\"] =\r\n          \"Basic \" +\r\n          Buffer.from(\r\n            parsed_proxy.username + \":\" + parsed_proxy.password\r\n          ).toString(\"base64\");\r\n      }\r\n\r\n      request({\r\n        host: parsed_proxy.host,\r\n        port: parsed_proxy.port,\r\n        method: \"CONNECT\",\r\n        // maxVersion: \"TLSv1.3\",\r\n        path: `${urlParsed.hostname}:${urlParsed.port ? urlParsed.port : 443}`,\r\n        timeout,\r\n        headers,\r\n      })\r\n        .on(\"connect\", (response, socket) => {\r\n          if (response.statusCode <= 299) {\r\n            resolve(socket);\r\n          } else {\r\n            reject(response);\r\n          }\r\n        })\r\n        .on(\"error\", (err) => reject(err))\r\n        .on(\"timeout\", (err) => reject(\"timeout to connect in proxy\"))\r\n        .end();\r\n    });\r\n  }\r\n\r\n  decompress(arr_data, headers) {\r\n    return new Promise((resolve, reject) => {\r\n      const buffer = Buffer.concat(arr_data);\r\n\r\n      if (headers[\"content-encoding\"]?.includes(\"gzip\")) {\r\n        const gunzip = createGunzip();\r\n\r\n        gunzip.end(buffer, function () {\r\n          resolve(gunzip.read().toString());\r\n        });\r\n      } else if (headers[\"content-encoding\"]?.includes(\"br\")) {\r\n        const brotli = createBrotliDecompress();\r\n\r\n        brotli.end(buffer, function () {\r\n          resolve(brotli.read().toString());\r\n        });\r\n      } else if (headers[\"content-encoding\"]?.includes(\"deflate\")) {\r\n        const inflate = createInflate();\r\n\r\n        inflate.end(buffer, function () {\r\n          resolve(inflate.read().toString());\r\n        });\r\n      } else {\r\n        resolve(buffer.toString());\r\n      }\r\n    });\r\n  }\r\n\r\n  async parseResponseData(arr_data, headers) {\r\n    var data = await this.decompress(arr_data, headers);\r\n\r\n    try {\r\n      data = JSON.parse(data);\r\n    } catch (error) {\r\n      if (\r\n        headers[\"content-type\"] &&\r\n        this.midia_types.some((type) => headers[\"content-type\"].includes(type))\r\n      ) {\r\n        data = Buffer.concat(arr_data);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async parseOptions(options = {}) {\r\n    try {\r\n      const parsed_url = new URL(options.url);\r\n\r\n      const buffer = Buffer.from(\r\n        typeof options.payload == \"object\"\r\n          ? JSON.stringify(options.payload)\r\n          : typeof options.payload != \"string\" && options.payload\r\n          ? String(options.payload)\r\n          : options.payload || \"\"\r\n      );\r\n\r\n      if (options.http2) {\r\n        if (options.proxy) {\r\n          options.socket = await this.proxyTunnel(options.url, options.proxy);\r\n        }\r\n\r\n        return {\r\n          url: options.url,\r\n          payload: buffer,\r\n          client: {\r\n            maxVersion: options?.tlsVersion || null,\r\n            ALPNProtocols: [\"h2\", \"http/1.1\"],\r\n            socket: options.socket,\r\n            ciphers: options?.ciphers || null,\r\n          },\r\n          request: {\r\n            [HTTP2_HEADER_AUTHORITY]: parsed_url.host,\r\n            [HTTP2_HEADER_PATH]: parsed_url.pathname + parsed_url.search || \"/\",\r\n            [HTTP2_HEADER_SCHEME]: parsed_url.protocol.split(\":\")[0],\r\n            [HTTP2_HEADER_METHOD]:\r\n              constants[`HTTP2_METHOD_${options.method?.toUpperCase()}`],\r\n            \"Content-Type\": \"text/plain\",\r\n            \"Content-Length\": buffer.length,\r\n            Accept: \"*/*, image/*\",\r\n            ...options?.headers,\r\n          },\r\n        };\r\n      } else {\r\n        if (options.proxy) {\r\n          options.agent = new Agent({\r\n            socket: await this.proxyTunnel(options.url, options.proxy).catch(\r\n              (error) => {\r\n                throw error;\r\n              }\r\n            ),\r\n            keepAlive: true,\r\n          });\r\n        } else {\r\n          options.agent = new Agent(options);\r\n        }\r\n\r\n        return {\r\n          url: options.url,\r\n          payload: buffer,\r\n          request: {\r\n            origin: parsed_url.origin,\r\n            href: parsed_url.href,\r\n            protocol: parsed_url.protocol || \"https:\",\r\n            hostname: parsed_url.hostname,\r\n            path: parsed_url.pathname + parsed_url.search || \"/\",\r\n            port: parsed_url.port || 443,\r\n            method: options.method?.toUpperCase() || \"GET\",\r\n            maxVersion: options?.tlsVersion || null,\r\n            timeout: options.timeout || 15000,\r\n            ciphers: options?.ciphers || null,\r\n            headers: {\r\n              accept: \"application/json, text/plain, image/*, */*\",\r\n              \"accept-language\": \"en-US,en;q=0.9\",\r\n              \"Content-Length\": buffer.length,\r\n              ...options?.headers,\r\n            },\r\n            ...options,\r\n          },\r\n        };\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new RequestManager();\r\n","\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTP(options = {}) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n      delete parsed_options.request.agent;\r\n\r\n      if (parsed_options.request.port == 443) {\r\n        delete parsed_options.request.port;\r\n      }\r\n\r\n      const req = request(parsed_options.request, (res) => {\r\n        const response_data = [];\r\n\r\n        res.on(\"data\", (chunk) => {\r\n          response_data.push(chunk);\r\n        });\r\n\r\n        res.on(\"end\", async () => {\r\n          res.status = res.statusCode;\r\n          res.data = await RequestManager.parseResponseData(\r\n            response_data,\r\n            res.headers\r\n          );\r\n\r\n          resolve(res);\r\n        });\r\n      }).on(\"error\", (error) => {\r\n        reject(error);\r\n      });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport { request } from \"https\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTPS(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n      const req = request({ ...parsed_options.request }, (res) => {\r\n        const response_data = [];\r\n\r\n        res.on(\"data\", (chunk) => {\r\n          response_data.push(chunk);\r\n        });\r\n\r\n        res.on(\"end\", async () => {\r\n          res.status = res.statusCode;\r\n          res.data = await RequestManager.parseResponseData(\r\n            response_data,\r\n            res.headers\r\n          );\r\n\r\n          resolve(res);\r\n        });\r\n      }).on(\"error\", (error) => {\r\n        reject(error);\r\n      });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","import { connect, constants } from \"http2\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nconst { HTTP2_HEADER_STATUS } = constants;\r\n\r\nexport default function HTTP2(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const parsed_options = await RequestManager.parseOptions(options);\r\n      const clientSession = connect(new URL(parsed_options.url), {\r\n        ...parsed_options.client,\r\n        peerMaxConcurrentStreams: Infinity,\r\n      });\r\n\r\n      clientSession.once(\"error\", console.log);\r\n\r\n      const req = clientSession.request({ ...parsed_options.request });\r\n\r\n      if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n      const response_data = [];\r\n      var headers;\r\n\r\n      req.once(\"response\", (_headers) => {\r\n        headers = _headers;\r\n      });\r\n\r\n      req.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      req.on(\"end\", async () => {\r\n        // req.destroy();\r\n        // clientSession.destroy();\r\n\r\n        resolve({\r\n          status: headers[HTTP2_HEADER_STATUS],\r\n          headers,\r\n          data: await RequestManager.parseResponseData(response_data, headers),\r\n        });\r\n      });\r\n\r\n      if (!req.readableEnded) req.end();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport __HTTP from \"./HTTP.js\";\r\nimport __HTTPS from \"./HTTPS.js\";\r\nimport __HTTP2 from \"./HTTP2.js\";\r\n\r\nconst ciphers = [\r\n  \"TLS_AES_256_GCM_SHA384\",\r\n  \"TLS_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_AES_128_GCM_SHA256\",\r\n  \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\r\n  \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\r\n  \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\r\n  \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\r\n  \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\r\n].join(\":\");\r\n\r\nfunction Request(...args) {\r\n  const url = args.find((v) => typeof v == \"string\") || \"\";\r\n  const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n  if (!options?.url) options.url = url;\r\n\r\n  options.url.includes(\"http:\") || options.url.includes(\"https:\")\r\n    ? null\r\n    : (options.url = `https://${options.url}`);\r\n\r\n  return options.http2\r\n    ? __HTTP2(options)\r\n    : options.url.includes(\"http:\")\r\n    ? __HTTP(options)\r\n    : __HTTPS(options);\r\n}\r\n\r\nRequest.BETTER_CIPHERS = ciphers;\r\n\r\nexport default Request;\r\n","\"use strict\";\r\n\r\nimport Request from \"../functions/Request.js\";\r\n\r\nclass Session {\r\n  constructor(default_options = {}) {\r\n    this.default_options = default_options;\r\n    this.cookies = \"\";\r\n  }\r\n\r\n  async req(...args) {\r\n    try {\r\n      const url = args.find((v) => typeof v == \"string\") || \"\";\r\n      const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n      if (!options?.url) options.url = url;\r\n\r\n      const parsed_options = this.addCookiesInOptions({\r\n        ...this.default_options,\r\n        ...options,\r\n        headers: {\r\n          ...this.default_options?.headers,\r\n          ...options?.headers,\r\n        },\r\n      });\r\n\r\n      const response = await Request(parsed_options);\r\n\r\n      try {\r\n        if (response.headers[\"set-cookie\"]) {\r\n          if (this.cookies) {\r\n            const session_cookies = this.json();\r\n            const response_cookies = this.json(\r\n              response.headers[\"set-cookie\"]\r\n                .map((c) => c.split(\";\")[0])\r\n                .join(\"; \")\r\n            );\r\n\r\n            const interweaving = {\r\n              ...session_cookies,\r\n              ...response_cookies,\r\n            };\r\n\r\n            var str = \"\";\r\n\r\n            for (const key of Object.keys(interweaving)) {\r\n              str += `${key}=${interweaving[key]}; `;\r\n            }\r\n\r\n            this.cookies = str.slice(0, -2);\r\n          } else {\r\n            this.cookies = response.headers[\"set-cookie\"]\r\n              .map((c) => c.split(\";\")[0])\r\n              .join(\"; \");\r\n          }\r\n        }\r\n      } catch (_error) {\r\n        throw _error;\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  addCookie(cookie) {\r\n    if (typeof cookie == \"object\") {\r\n      if (this.cookies.includes(cookie.name)) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      }\r\n    } else {\r\n      if (this.cookies.includes(cookie.split(\"=\")[0])) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.trim()}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.trim()}`;\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  removeCookie(cookie_name) {\r\n    if (this.cookies.includes(cookie_name)) {\r\n      this.cookies = this.cookies.replace(\r\n        this.cookies.slice(this.cookies.indexOf(cookie_name)).split(\" \")[0],\r\n        \"\"\r\n      );\r\n\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  addCookiesInOptions(options) {\r\n    if (this.cookies) {\r\n      if (options.headers && options.headers?.cookie) {\r\n        options.headers.cookie += \"; \" + this.cookies;\r\n      } else {\r\n        options.headers.cookie = this.cookies;\r\n      }\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  json(str, encode = true) {\r\n    const object = {};\r\n\r\n    for (const cookie of (str || this.cookies).split(\"; \")) {\r\n      const [name, ...value] = cookie.split(\"=\");\r\n\r\n      if (name) {\r\n        object[name] = encode\r\n          ? encodeURIComponent(value.join(\"=\"))\r\n          : value.join(\"=\");\r\n      }\r\n    }\r\n\r\n    return object;\r\n  }\r\n}\r\n\r\nexport default Session;\r\n","import _request from \"./functions/Request.js\";\r\nimport _Session from \"./structures/Session.js\";\r\nimport assert from \"assert\";\r\n\r\n[\r\n  \"get\",\r\n  \"post\",\r\n  \"patch\",\r\n  \"options\",\r\n  \"delete\",\r\n  \"head\",\r\n  \"put\",\r\n  \"link\",\r\n  \"unlink\",\r\n  \"purge\",\r\n].forEach((method) => {\r\n  _request[method] = (options) => _request({ ...options, method });\r\n});\r\n\r\n_request.Session = _Session;\r\nassert.equal(_request.Session, _Session);\r\n\r\nconst request = _request;\r\n\r\nexport default request;\r\n"],"names":["HTTP2_HEADER_PATH","constants","HTTP2_HEADER_METHOD","HTTP2_HEADER_SCHEME","HTTP2_HEADER_AUTHORITY","RequestManager","_classCallCheck","midia_types","_createClass","key","value","proxyParse","text","input","protocol","split","includes","substring","lastIndexOf","host","port","parseInt","_input$split","_input$split2","_slicedToArray","username","password","proxyTunnel","url","proxy","_this","headers","arguments","length","undefined","timeout","Promise","resolve","reject","urlParsed","URL","parsed_proxy","_typeof","Buffer","from","toString","request","method","path","concat","hostname","on","response","socket","statusCode","err","end","decompress","arr_data","_headers$contentEnco","_headers$contentEnco2","_headers$contentEnco3","buffer","gunzip","createGunzip","read","brotli","createBrotliDecompress","inflate","createInflate","_parseResponseData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_callee$","_context","prev","next","sent","JSON","parse","error","some","type","abrupt","stop","parseResponseData","_x","_x2","apply","_parseOptions","_callee2","options","parsed_url","_options$method","_options$method2","_args2","_callee2$","_context2","payload","stringify","String","http2","client","maxVersion","tlsVersion","ALPNProtocols","ciphers","_objectSpread","_defineProperty","pathname","search","toUpperCase","t0","Agent","t1","t2","keepAlive","agent","origin","href","accept","t3","parseOptions","HTTP","_ref","_parsed_options$paylo","parsed_options","req","res","response_data","chunk","push","status","write","HTTPS","HTTP2_HEADER_STATUS","HTTP2","clientSession","connect","peerMaxConcurrentStreams","Infinity","once","console","log","_headers","t4","readableEnded","join","Request","_len","args","Array","_key","find","v","__HTTP2","__HTTP","__HTTPS","BETTER_CIPHERS","Session","default_options","cookies","_req","_this$default_options","session_cookies","response_cookies","interweaving","str","_i","_Object$keys","_args","addCookiesInOptions","json","map","c","Object","keys","slice","addCookie","cookie","name","trim","removeCookie","cookie_name","replace","indexOf","_options$headers","encode","object","_iterator","_createForOfIteratorHelper","_step","s","n","done","_cookie$split","_cookie$split2","_toArray","encodeURIComponent","e","f","forEach","_request","_Session","assert","equal"],"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"}