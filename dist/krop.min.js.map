{"version":3,"file":"krop.min.js","sources":["../lib/structures/RequestManager.js","../lib/functions/HTTP.js","../lib/functions/HTTPS.js","../lib/functions/HTTP2.js","../lib/functions/Request.js","../lib/structures/Session.js","../lib/Index.js"],"sourcesContent":["\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport { Agent } from \"https\";\r\nimport { constants } from \"http2\";\r\n\r\nconst {\r\n  HTTP2_HEADER_PATH,\r\n  HTTP2_HEADER_METHOD,\r\n  HTTP2_HEADER_SCHEME,\r\n  HTTP2_HEADER_AUTHORITY,\r\n} = constants;\r\n\r\nclass RequestManager {\r\n  constructor() {\r\n    this.midia_types = [\"image\", \"video\", \"audio\", \"font\"];\r\n  }\r\n\r\n  proxyParse(text) {\r\n    var input = text;\r\n\r\n    const protocol = input.split(\"://\")[0];\r\n\r\n    if (input.includes(\"@\"))\r\n      input = input.substring(input.lastIndexOf(\"@\") + 1);\r\n    else if (input.includes(\"://\")) input = input.split(\"://\")[1];\r\n\r\n    const host = input.split(\":\")[0];\r\n    const port = parseInt(input.split(\":\")[1]);\r\n\r\n    input = text.split(\"://\")[1];\r\n\r\n    input = text.substring(0, text.lastIndexOf(\"@\"));\r\n    const [username, password] = input.split(\":\");\r\n\r\n    return { host, port, protocol: protocol || \"https\", username, password };\r\n  }\r\n\r\n  proxyTunnel(url, proxy, headers = {}, timeout = 15000) {\r\n    return new Promise((resolve, reject) => {\r\n      const urlParsed = new URL(url);\r\n      const parsed_proxy =\r\n        typeof proxy == \"object\" ? proxy : this.proxyParse(proxy);\r\n\r\n      if (parsed_proxy.username) {\r\n        headers[\"Proxy-Authorization\"] =\r\n          \"Basic \" +\r\n          Buffer.from(\r\n            parsed_proxy.username + \":\" + parsed_proxy.password\r\n          ).toString(\"base64\");\r\n      }\r\n\r\n      request({\r\n        host: parsed_proxy.host,\r\n        port: parsed_proxy.port,\r\n        method: \"CONNECT\",\r\n        maxVersion: \"TLSv1.3\",\r\n        path: `${urlParsed.hostname}:${urlParsed.port ? urlParsed.port : 443}`,\r\n        timeout,\r\n        headers,\r\n      })\r\n        .on(\"connect\", (response, socket) => {\r\n          if (response.statusCode == 200) {\r\n            resolve(socket);\r\n          } else {\r\n            reject(response);\r\n          }\r\n        })\r\n        .on(\"error\", (err) => reject(err))\r\n        .on(\"timeout\", (err) => reject(\"timeout to connect in proxy\"))\r\n        .end();\r\n    });\r\n  }\r\n\r\n  parseResponseData(arr_data, headers) {\r\n    const buffer = Buffer.concat(arr_data);\r\n    var data;\r\n\r\n    try {\r\n      data = JSON.parse(buffer.toString());\r\n    } catch (error) {\r\n      if (\r\n        headers[\"content-type\"] &&\r\n        this.midia_types.some((type) => headers[\"content-type\"].includes(type))\r\n      ) {\r\n        data = buffer;\r\n      } else {\r\n        data = buffer.toString();\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async parseOptions(options = {}) {\r\n    const parsed_url = new URL(options.url);\r\n\r\n    const buffer = Buffer.from(\r\n      typeof options.payload == \"object\"\r\n        ? JSON.stringify(options.payload)\r\n        : typeof options.payload != \"string\" && options.payload\r\n        ? String(options.payload)\r\n        : options.payload || \"\"\r\n    );\r\n\r\n    if (options.http2) {\r\n      if (options.proxy) {\r\n        options.socket = await this.proxyTunnel(options.url, options.proxy);\r\n      }\r\n\r\n      return {\r\n        url: options.url,\r\n        payload: buffer,\r\n        client: {\r\n          maxVersion: \"TLSv1.3\",\r\n          ALPNProtocols: [\"h2\", \"http/1.1\"],\r\n          socket: options.socket,\r\n        },\r\n        request: {\r\n          [HTTP2_HEADER_AUTHORITY]: parsed_url.host,\r\n          [HTTP2_HEADER_PATH]: parsed_url.pathname + parsed_url.search || \"/\",\r\n          [HTTP2_HEADER_SCHEME]: parsed_url.protocol.split(\":\")[0],\r\n          [HTTP2_HEADER_METHOD]:\r\n            constants[`HTTP2_METHOD_${options.method?.toUpperCase()}`],\r\n          \"Content-Type\": \"text/plain\",\r\n          \"Content-Length\": buffer.length,\r\n          Accept: \"*/*, image/*\",\r\n          ...options?.headers,\r\n        },\r\n      };\r\n    } else {\r\n      if (options.proxy) {\r\n        options.agent = new Agent({\r\n          socket: await this.proxyTunnel(options.url, options.proxy).catch(\r\n            (error) => {\r\n              throw error;\r\n            }\r\n          ),\r\n          keepAlive: true,\r\n        });\r\n      } else {\r\n        options.agent = new Agent(options);\r\n      }\r\n\r\n      return {\r\n        url: options.url,\r\n        payload: buffer,\r\n        request: {\r\n          origin: parsed_url.origin,\r\n          href: parsed_url.href,\r\n          protocol: parsed_url.protocol || \"https:\",\r\n          hostname: parsed_url.hostname,\r\n          path: parsed_url.pathname + parsed_url.search || \"/\",\r\n          port: parsed_url.port || 443,\r\n          method: options.method?.toUpperCase() || \"GET\",\r\n          maxVersion: \"TLSv1.3\",\r\n          timeout: options.timeout || 15000,\r\n          headers: {\r\n            accept: \"application/json, text/plain, image/*, */*\",\r\n            \"accept-language\": \"en-US,en;q=0.9\",\r\n            \"Content-Length\": buffer.length,\r\n            ...options?.headers,\r\n          },\r\n          ...options,\r\n        },\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new RequestManager();\r\n","\"use strict\";\r\n\r\nimport { request } from \"http\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTP(options = {}) {\r\n  return new Promise(async (resolve, reject) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n    delete parsed_options.request.agent;\r\n\r\n    if (parsed_options.request.port == 443) {\r\n      delete parsed_options.request.port;\r\n    }\r\n\r\n    const req = request(parsed_options.request, (res) => {\r\n      const response_data = [];\r\n\r\n      res.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      res.on(\"end\", () => {\r\n        res.status = res.statusCode;\r\n        res.data = RequestManager.parseResponseData(response_data, res.headers);\r\n\r\n        resolve(res);\r\n      });\r\n    }).on(\"error\", (error) => {\r\n      reject(error);\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    req.end();\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport { request } from \"https\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nexport default function HTTPS(options) {\r\n  return new Promise(async (resolve, reject) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n\r\n    const req = request(parsed_options.request, (res) => {\r\n      const response_data = [];\r\n\r\n      res.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      res.on(\"end\", () => {\r\n        res.status = res.statusCode;\r\n        res.data = RequestManager.parseResponseData(response_data, res.headers);\r\n\r\n        resolve(res);\r\n      });\r\n    }).on(\"error\", (error) => {\r\n      reject(error);\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    req.end();\r\n  });\r\n}\r\n","import { connect, constants } from \"http2\";\r\nimport RequestManager from \"../structures/RequestManager.js\";\r\n\r\nconst { HTTP2_HEADER_STATUS } = constants;\r\n\r\nexport default function HTTP2(options) {\r\n  return new Promise(async (resolve) => {\r\n    const parsed_options = await RequestManager.parseOptions(options);\r\n    const clientSession = connect(\r\n      new URL(parsed_options.url),\r\n      parsed_options.client\r\n    );\r\n    const req = clientSession.request(parsed_options.request);\r\n\r\n    req.on(\"response\", (headers) => {\r\n      const response_data = [];\r\n\r\n      req.on(\"data\", (chunk) => {\r\n        response_data.push(chunk);\r\n      });\r\n\r\n      req.on(\"end\", () => {\r\n        req.close();\r\n        clientSession.close();\r\n\r\n        resolve({\r\n          status: headers[HTTP2_HEADER_STATUS],\r\n          headers,\r\n          data: RequestManager.parseResponseData(response_data, headers),\r\n        });\r\n      });\r\n    });\r\n\r\n    if (parsed_options.payload?.length > 0) req.write(parsed_options.payload);\r\n\r\n    req.end();\r\n  });\r\n}\r\n","\"use strict\";\r\n\r\nimport __HTTP from \"./HTTP.js\";\r\nimport __HTTPS from \"./HTTPS.js\";\r\nimport __HTTP2 from \"./HTTP2.js\";\r\n\r\nfunction Request(...args) {\r\n  const url = args.find((v) => typeof v == \"string\") || \"\";\r\n  const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n  if (!options?.url) options.url = url;\r\n\r\n  options.url.includes(\"http:\") || options.url.includes(\"https:\")\r\n    ? null\r\n    : (options.url = `https://${options.url}`);\r\n\r\n  return options.http2\r\n    ? __HTTP2(options)\r\n    : options.url.includes(\"http:\")\r\n    ? __HTTP(options)\r\n    : __HTTPS(options);\r\n}\r\n\r\nexport default Request;\r\n","\"use strict\";\r\n\r\nimport Request from \"../functions/Request.js\";\r\n\r\nclass Session {\r\n  constructor(default_options = {}) {\r\n    this.default_options = default_options;\r\n    this.cookies = \"\";\r\n  }\r\n\r\n  async req(...args) {\r\n    const url = args.find((v) => typeof v == \"string\") || \"\";\r\n    const options = args.find((v) => typeof v == \"object\") || {};\r\n\r\n    if (!options?.url) options.url = url;\r\n\r\n    const parsed_options = this.addCookiesInOptions({\r\n      ...this.default_options,\r\n      ...options,\r\n      headers: {\r\n        ...this.default_options?.headers,\r\n        ...options?.headers,\r\n      },\r\n    });\r\n\r\n    const response = await Request(parsed_options);\r\n\r\n    try {\r\n      if (response.headers[\"set-cookie\"]) {\r\n        if (this.cookies)\r\n          this.cookies +=\r\n            \"; \" +\r\n            response.headers[\"set-cookie\"]\r\n              .map((c) => c.split(\";\")[0])\r\n              .join(\"; \");\r\n        else\r\n          this.cookies = response.headers[\"set-cookie\"]\r\n            .map((c) => c.split(\";\")[0])\r\n            .join(\"; \");\r\n      }\r\n    } catch (error) {}\r\n\r\n    return response;\r\n  }\r\n\r\n  addCookie(cookie) {\r\n    if (typeof cookie == \"object\") {\r\n      if (this.cookies.includes(cookie.name)) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.name}=${cookie.value}`;\r\n\r\n        return true;\r\n      }\r\n    } else {\r\n      if (this.cookies.includes(cookie.split(\"=\")[0])) {\r\n        return false;\r\n      } else if (this.cookies) {\r\n        this.cookies += `; ${cookie.trim()}`;\r\n\r\n        return true;\r\n      } else {\r\n        this.cookies = `${cookie.trim()}`;\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  removeCookie(cookie_name) {\r\n    if (this.cookies.includes(cookie_name)) {\r\n      this.cookies = this.cookies.replace(\r\n        this.cookies.slice(this.cookies.indexOf(cookie_name)).split(\" \")[0],\r\n        \"\"\r\n      );\r\n\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  addCookiesInOptions(options) {\r\n    if (this.cookies) {\r\n      if (options.headers && options.headers?.cookie) {\r\n        options.headers.cookie += \"; \" + this.cookies;\r\n      } else {\r\n        options.headers.cookie = this.cookies;\r\n      }\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  json() {\r\n    const object = {};\r\n\r\n    for (const cookie of this.cookies.split(\"; \")) {\r\n      const [name, ...value] = cookie.split(\"=\");\r\n\r\n      if (name) {\r\n        object[name] = value.join(\"=\");\r\n      }\r\n    }\r\n    return object;\r\n  }\r\n}\r\n\r\nexport default Session;\r\n","import _request from \"./functions/Request.js\";\r\nimport _Session from \"./structures/Session.js\";\r\nimport assert from \"assert\";\r\n\r\n[\r\n  \"get\",\r\n  \"post\",\r\n  \"patch\",\r\n  \"options\",\r\n  \"delete\",\r\n  \"head\",\r\n  \"put\",\r\n  \"link\",\r\n  \"unlink\",\r\n  \"purge\",\r\n].forEach((method) => {\r\n  _request[method] = (options) => _request({ ...options, method });\r\n});\r\n\r\n_request.Session = _Session;\r\nassert.equal(_request.Session, _Session);\r\n\r\nconst request = _request;\r\n\r\nexport default request;\r\n"],"names":["HTTP2_HEADER_PATH","constants","HTTP2_HEADER_METHOD","HTTP2_HEADER_SCHEME","HTTP2_HEADER_AUTHORITY","RequestManager","_classCallCheck","this","midia_types","_parseOptions","_createClass","key","value","text","input","protocol","split","includes","substring","lastIndexOf","host","port","parseInt","_input$split2","_slicedToArray","username","password","url","proxy","_this","headers","arguments","length","undefined","timeout","Promise","resolve","reject","urlParsed","URL","parsed_proxy","_typeof","proxyParse","Buffer","from","toString","request","method","maxVersion","path","hostname","on","response","socket","statusCode","err","end","arr_data","data","buffer","concat","JSON","parse","error","some","type","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","parsed_url","_options$method","_objectSpread2","_options$method2","_args","wrap","_context","prev","next","payload","stringify","String","http2","proxyTunnel","sent","abrupt","client","ALPNProtocols","pathname","search","_defineProperty","toUpperCase","t0","Agent","t1","t2","keepAlive","agent","_objectSpread","origin","href","accept","stop","apply","RequestManager$1","HTTP","_ref","_parsed_options$paylo","parsed_options","req","parseOptions","res","response_data","chunk","push","status","parseResponseData","write","_x","_x2","HTTPS","HTTP2_HEADER_STATUS","HTTP2","clientSession","connect","close","Request","_len","args","Array","_key","find","v","__HTTP2","__HTTP","__HTTPS","Session","default_options","cookies","_req","_this$default_options","addCookiesInOptions","map","c","join","cookie","name","trim","cookie_name","replace","slice","indexOf","_options$headers","_step","object","_iterator","_createForOfIteratorHelper","s","n","done","_cookie$split2","_toArray","e","f","forEach","_request","_Session","assert","equal"],"mappings":"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"}